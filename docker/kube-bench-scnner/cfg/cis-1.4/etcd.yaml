---
controls:
version: 1.4
id: 1
text: "Master Node Security Configuration"
type: "etcd"
groups:
  - id: 1.4
    text: "Configuration Files"
    checks:
      - id: 1.4.11
        text: "Ensure that the etcd data directory permissions are set to 700 or more restrictive (Scored)"
        audit: ps -ef | grep $etcdbin | grep -- --data-dir | sed 's%.*data-dir[= ]\([^ ]*\).*%\1%' | xargs stat -c %a
        tests:
          test_items:
          - flag: "700"
            compare:
              op: eq
              value: "700"
            set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir ,
          from the below command:
          ps -ef | grep $etcdbin
          Run the below command (based on the etcd data directory found above). For example,
          chmod 700 /var/lib/etcd
        scored: true

      - id: 1.4.12
        text: "Ensure that the etcd data directory ownership is set to etcd:etcd (Scored)"
        audit: ps -ef | grep $etcdbin | grep -- --data-dir | sed 's%.*data-dir[= ]\([^ ]*\).*%\1%' | xargs stat -c %U:%G
        tests:
          test_items:
          - flag: "etcd:etcd"
            set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir ,
          from the below command:
          ps -ef | grep $etcdbin
          Run the below command (based on the etcd data directory found above). For example,
          chown etcd:etcd /var/lib/etcd
        scored: true

      - id: 1.4.19
        text: "Ensure that the Kubernetes PKI directory and file ownership is set to root:root (Scored)"
        audit: "ls -laR /etc/kubernetes/pki/"
        type: "manual"
        tests:
          test_items:
          - flag: "root root"
            compare:
              op: eq
              value: "root root"
            set: true
        remediation: |
          [Manual test]
          Run the below command (based on the file location on your system) on the master node.
          For example, chown -R root:root /etc/kubernetes/pki/
        scored: true

      - id: 1.4.20
        text: "Ensure that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive (Scored)"
        audit: "stat -c %n\ %a /etc/kubernetes/pki/*.crt"
        type: "manual"
        tests:
          bin_op: or
          test_items:
            - flag: "644"
              compare:
                op: eq
                value: "644"
              set: true
            - flag: "640"
              compare:
                op: eq
                value: "640"
              set: true
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          [Manual test]
          Run the below command (based on the file location on your system) on the master node.
          For example, chmod -R 644 /etc/kubernetes/pki/*.crt
        scored: true

      - id: 1.4.21
        text: "Ensure that the Kubernetes PKI key file permissions are set to 600 or more restrictive (Scored)"
        audit: "stat -c %n\ %a /etc/kubernetes/pki/*.key"
        type: "manual"
        tests:
          test_items:
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |
          [Manual test]
          Run the below command (based on the file location on your system) on the master node.
          For example, chmod -R 600 /etc/kubernetes/pki/*.key
        scored: true

  - id: 1.5
    text: "etcd"
    checks:
      - id: 1.5.1
        text: "Ensure that the --cert-file and --key-file arguments are set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $etcdbin | grep -v grep"
        tests:
          test_items:
          - flag: "--cert-file"
            set: true
          - flag:  "--key-file"
            set: true
        remediation: |
          Follow the etcd service documentation and configure TLS encryption.
          Then, edit the etcd pod specification file $etcdconf on the
          master node and set the below parameters.
          --ca-file=</path/to/ca-file>
          --key-file=</path/to/key-file>
        scored: true

      - id: 1.5.2
        text: "Ensure that the --client-cert-auth argument is set to true (Scored)"
        audit: "/bin/ps -ef | grep $etcdbin | grep -v grep"
        tests:
          test_items:
          - flag: "--client-cert-auth"
            compare:
              op: eq
              value: true
            set: true
        remediation: |
          Edit the etcd pod specification file $etcdconf on the master
          node and set the below parameter.
          --client-cert-auth="true"
        scored: true

      - id: 1.5.3
        text: "Ensure that the --auto-tls argument is not set to true (Scored)"
        audit: "/bin/ps -ef | grep $etcdbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
          - flag: "--auto-tls"
            set: false
          - flag: "--auto-tls"
            compare:
              op: eq
              value: false
        remediation: |
          Edit the etcd pod specification file $etcdconf on the master
          node and either remove the --auto-tls parameter or set it to false.
            --auto-tls=false
        scored: true

      - id: 1.5.4
        text: "Ensure that the --peer-cert-file and --peer-key-file arguments are
        set as appropriate (Scored)"
        audit: "/bin/ps -ef | grep $etcdbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
          - flag: "--peer-cert-file"
            set: true
          - flag: "--peer-key-file"
            set: true
        remediation: |
          Follow the etcd service documentation and configure peer TLS encryption as appropriate
          for your etcd cluster. Then, edit the etcd pod specification file $etcdconf on the
          master node and set the below parameters.
          --peer-client-file=</path/to/peer-cert-file>
          --peer-key-file=</path/to/peer-key-file>
        scored: true

      - id: 1.5.5
        text: "Ensure that the --peer-client-cert-auth argument is set to true (Scored)"
        audit: "/bin/ps -ef | grep $etcdbin | grep -v grep"
        tests:
          test_items:
          - flag: "--peer-client-cert-auth"
            compare:
              op: eq
              value: true
            set: true
        remediation: |
          Edit the etcd pod specification file $etcdconf on the master
          node and set the below parameter.
          --peer-client-cert-auth=true
        scored: true

      - id: 1.5.6
        text: "Ensure that the --peer-auto-tls argument is not set to true (Scored)"
        audit: "/bin/ps -ef | grep $etcdbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
          - flag: "--peer-auto-tls"
            set: false
          - flag: "--peer-auto-tls"
            compare:
              op: eq
              value: false
            set: true
        remediation: |
          Edit the etcd pod specification file $etcdconf on the master
          node and either remove the --peer-auto-tls parameter or set it to false.
          --peer-auto-tls=false
        scored: true

      - id: 1.5.7
        text: "Ensure that a unique Certificate Authority is used for etcd (Not Scored)"
        audit: "/bin/ps -ef | grep $etcdbin | grep -v grep"
        type: "manual"
        tests:
          test_items:
          - flag: "--trusted-ca-file"
            set: true
        remediation: |
          [Manual test]
          Follow the etcd documentation and create a dedicated certificate authority setup for the
          etcd service.
          Then, edit the etcd pod specification file $etcdconf on the
          master node and set the below parameter.
          --trusted-ca-file=</path/to/ca-file>
        scored: false