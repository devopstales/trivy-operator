{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is trivy-operator? Trivy-operator is a Kubernetes Operator based on the open-source container vulnerability scanner Trivy . The goal of this project is to provide a vulnerability scanner that continuously scans containers deployed in a Kubernetes cluster. Built with Kubernetes Operator Pythonic Framework (Kopf) . There are a few solution for checking the images when you deploy them to the Kubernetes cluster, but fighting against vulnerabilities is a day to day task. Check once is not enough when every day is a new day for security frats. That is why I created trivy-operator so you can create scheduled image scans on your running pods.","title":"Overview"},{"location":"#what-is-trivy-operator","text":"Trivy-operator is a Kubernetes Operator based on the open-source container vulnerability scanner Trivy . The goal of this project is to provide a vulnerability scanner that continuously scans containers deployed in a Kubernetes cluster. Built with Kubernetes Operator Pythonic Framework (Kopf) . There are a few solution for checking the images when you deploy them to the Kubernetes cluster, but fighting against vulnerabilities is a day to day task. Check once is not enough when every day is a new day for security frats. That is why I created trivy-operator so you can create scheduled image scans on your running pods.","title":"What is trivy-operator?"},{"location":"configuration/","text":"Configuration Create a values file for your helm deploy: cat <<'EOF'> values.yaml image : repository : devopstales/trivy-operator pullPolicy : Always tag : \"2.3\" imagePullSecrets : [] podSecurityContext : fsGroup : 10001 fsGroupChangePolicy : \"OnRootMismatch\" serviceAccount : create : true annotations : {} name : \"trivy-operator\" monitoring : port : \"9115\" serviceMonitor : enabled : false namespace : \"monitoring-system\" storage : enabled : true size : 1Gi NamespaceScanner : crontab : \"*/5 * * * *\" namespaceSelector : \"trivy-scan\" registryAuth : enabled : false registry : - name : docker.io user : \"user\" password : \"password\" githubToken : enabled : false token : \"\" EOF Operator Configuration The following tables lists configurable parameters of the trivy-operator chart and their default values. Parameter Description Default image.repository image devopstales/trivy-operator image.pullPolicy pullPolicy Always image.tag image tag 2.4.1 imagePullSecrets imagePullSecrets list [] podSecurityContext.fsGroup mount id 10001 serviceAccount.create create serviceAccount true serviceAccount.annotations add annotation to serviceAccount {} serviceAccount.name name of the serviceAccount trivy-operator monitoring.port prometheus endpoint port 9115 serviceMonitor.enabled enable serviceMonitor object creation false serviceMonitor.namespace where to create serviceMonitor object kube-system serviceMonitor.interval set interval to serviceMonitor 60s serviceMonitor.scrapeTimeout set scrapeTimeout to serviceMonitor 30s serviceMonitor.relabelings set relabelings to serviceMonitor [] serviceMonitor.metricRelabelings set metricRelabelings to serviceMonitor [] persistence.enabled enable pv to store trivy database true persistence.size pv size 1Gi persistence.storageClass storageClass Not defined persistence.accessMode accessMode ReadWriteOnce persistence.annotations add extra annotations No value NamespaceScanner.crontab cronjob scheduler \" /5 * * *\" NamespaceScanner.namespaceSelector Namespace Selector \"trivy-scan\" NamespaceScanner.clusterWide scan all namespaces \"false\" NamespaceScanner.policyreport generate policy reports \"false\" registryAuth.enabled enable registry authentication in operator false registryAuth.registry registry name for authentication registryAuth.user username for authentication registryAuth.password password for authentication githubToken.enabled Enable githubToken usage for trivy database update false githubToken.token githubToken value \"\" nodeSelector Select node where deploy \"\" tolerations Tolerations for use with node taints [] affinity Assign custom affinity rules to the trivy operator {}","title":"Configuration"},{"location":"configuration/#configuration","text":"Create a values file for your helm deploy: cat <<'EOF'> values.yaml image : repository : devopstales/trivy-operator pullPolicy : Always tag : \"2.3\" imagePullSecrets : [] podSecurityContext : fsGroup : 10001 fsGroupChangePolicy : \"OnRootMismatch\" serviceAccount : create : true annotations : {} name : \"trivy-operator\" monitoring : port : \"9115\" serviceMonitor : enabled : false namespace : \"monitoring-system\" storage : enabled : true size : 1Gi NamespaceScanner : crontab : \"*/5 * * * *\" namespaceSelector : \"trivy-scan\" registryAuth : enabled : false registry : - name : docker.io user : \"user\" password : \"password\" githubToken : enabled : false token : \"\" EOF","title":"Configuration"},{"location":"configuration/#operator-configuration","text":"The following tables lists configurable parameters of the trivy-operator chart and their default values. Parameter Description Default image.repository image devopstales/trivy-operator image.pullPolicy pullPolicy Always image.tag image tag 2.4.1 imagePullSecrets imagePullSecrets list [] podSecurityContext.fsGroup mount id 10001 serviceAccount.create create serviceAccount true serviceAccount.annotations add annotation to serviceAccount {} serviceAccount.name name of the serviceAccount trivy-operator monitoring.port prometheus endpoint port 9115 serviceMonitor.enabled enable serviceMonitor object creation false serviceMonitor.namespace where to create serviceMonitor object kube-system serviceMonitor.interval set interval to serviceMonitor 60s serviceMonitor.scrapeTimeout set scrapeTimeout to serviceMonitor 30s serviceMonitor.relabelings set relabelings to serviceMonitor [] serviceMonitor.metricRelabelings set metricRelabelings to serviceMonitor [] persistence.enabled enable pv to store trivy database true persistence.size pv size 1Gi persistence.storageClass storageClass Not defined persistence.accessMode accessMode ReadWriteOnce persistence.annotations add extra annotations No value NamespaceScanner.crontab cronjob scheduler \" /5 * * *\" NamespaceScanner.namespaceSelector Namespace Selector \"trivy-scan\" NamespaceScanner.clusterWide scan all namespaces \"false\" NamespaceScanner.policyreport generate policy reports \"false\" registryAuth.enabled enable registry authentication in operator false registryAuth.registry registry name for authentication registryAuth.user username for authentication registryAuth.password password for authentication githubToken.enabled Enable githubToken usage for trivy database update false githubToken.token githubToken value \"\" nodeSelector Select node where deploy \"\" tolerations Tolerations for use with node taints [] affinity Assign custom affinity rules to the trivy operator {}","title":"Operator Configuration"},{"location":"installation/","text":"Installation Helm Helm , which is a popular package manager for Kubernetes, allows installing applications from parameterized YAML manifests called Helm charts . Installing from the DevOpsTales Chart Repository helm repo add devopstales https://devopstales.github.io/helm-charts helm repo update helm upgrade --install trivy-operator devopstales/trivy-operator Tip : List all releases using helm list . Advanced Configuration The command deploys trivy-operator on the Kubernetes cluster in the default configuration. The Parameters section lists the parameters that can be configured during installation. Uninstall You can uninstall the operator with the following command: helm uninstall trivy-operator You have to manually delete custom resource definitions an the validating webhook configurations created by the helm install command: Danger Deleting custom resource definitions will also delete all security reports generated by the operator. kubectl delete crd namespace-scanners.trivy-operator.devopstales.io kubectl delete crd vulnerabilityreports.trivy-operator.devopstales.io kubectl delete validatingwebhookconfigurations trivy-image-validator.devopstales.io OperatorFramework With the release of trivy-operator 2.3 I published trivy-operator with OperatorFramework to OperatorHub:","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#helm","text":"Helm , which is a popular package manager for Kubernetes, allows installing applications from parameterized YAML manifests called Helm charts .","title":"Helm"},{"location":"installation/#installing-from-the-devopstales-chart-repository","text":"helm repo add devopstales https://devopstales.github.io/helm-charts helm repo update helm upgrade --install trivy-operator devopstales/trivy-operator Tip : List all releases using helm list .","title":"Installing from the DevOpsTales Chart Repository"},{"location":"installation/#advanced-configuration","text":"The command deploys trivy-operator on the Kubernetes cluster in the default configuration. The Parameters section lists the parameters that can be configured during installation.","title":"Advanced Configuration"},{"location":"installation/#uninstall","text":"You can uninstall the operator with the following command: helm uninstall trivy-operator You have to manually delete custom resource definitions an the validating webhook configurations created by the helm install command: Danger Deleting custom resource definitions will also delete all security reports generated by the operator. kubectl delete crd namespace-scanners.trivy-operator.devopstales.io kubectl delete crd vulnerabilityreports.trivy-operator.devopstales.io kubectl delete validatingwebhookconfigurations trivy-image-validator.devopstales.io","title":"Uninstall"},{"location":"installation/#operatorframework","text":"With the release of trivy-operator 2.3 I published trivy-operator with OperatorFramework to OperatorHub:","title":"OperatorFramework"},{"location":"quickstart/","text":"Quick Start Before you Begin You need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by installing minikube , kind or microk8s , or you can use the following Kubernetes playground . You also need the Trivy-Operator to be installed with Helm . Workloads Scanning Let's create a Deployment that we know is vulnerable: kubectl apply -f https://raw.githubusercontent.com/devopstales/trivy-operator/main/deploy/kubernetes/10_demo.yaml Scheduled Image scans Default trivy-operator execute a scan script every 5 minutes. It will get images from all the namespaces with the label trivy-scan=true , and then check these images with trivy for vulnerabilities. You can label an existing namespace with the fallowing command: kubectl label namespaces guestbook-demo trivy-scan=true Reports If enabled the operator creates a VulnerabilityReport, and a PolicyReport for each different container. kubectl get vulnerabilityreports -n trivytest Result NAME REPOSITORY TAG AGE STATUS pod-nginx-container-init library/alpine latest 18m OK pod-nginx-container-init2 library/ubuntu latest 18m OK pod-nginx-container-nginx library/nginx latest 18m OK kubectl get policyreports -n trivytest Result NAME PASS FAIL WARN ERROR SKIP AGE trivy-vuln-pod-nginx-container-init 1 0 0 0 0 17m trivy-vuln-pod-nginx-container-init2 0 0 21 0 0 17m trivy-vuln-pod-nginx-container-nginx 0 32 106 0 0 17m Tip You can get and describe vulnerabilityreports and policyreports as built-in Kubernetes objects: kubectl get vulnerabilityreport pod-nginx-container-init -o json kubectl describe policyreport trivy-vuln-pod-nginx-container-init Notice that scan reports generated by the operator are controlled by Kubernetes workloads. kubectl tree pod nginx -n trivytest Result NAMESPACE NAME READY REASON AGE trivytest Pod/nginx True 4h40m trivytest \u251c\u2500CiliumEndpoint/nginx - 4h40m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-init - 20m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-init2 - 20m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-nginx - 20m trivytest \u251c\u2500VulnerabilityReport/pod-nginx-container-init - 20m trivytest \u251c\u2500VulnerabilityReport/pod-nginx-container-init2 - 20m trivytest \u2514\u2500VulnerabilityReport/pod-nginx-container-nginx - 20m Note The tree command is a kubectl plugin to browse Kubernetes object hierarchies as a tree. Policy Reporter UI Screenshots VulnerabilityReports","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#before-you-begin","text":"You need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by installing minikube , kind or microk8s , or you can use the following Kubernetes playground . You also need the Trivy-Operator to be installed with Helm .","title":"Before you Begin"},{"location":"quickstart/#workloads-scanning","text":"Let's create a Deployment that we know is vulnerable: kubectl apply -f https://raw.githubusercontent.com/devopstales/trivy-operator/main/deploy/kubernetes/10_demo.yaml","title":"Workloads Scanning"},{"location":"quickstart/#scheduled-image-scans","text":"Default trivy-operator execute a scan script every 5 minutes. It will get images from all the namespaces with the label trivy-scan=true , and then check these images with trivy for vulnerabilities. You can label an existing namespace with the fallowing command: kubectl label namespaces guestbook-demo trivy-scan=true","title":"Scheduled Image scans"},{"location":"quickstart/#reports","text":"If enabled the operator creates a VulnerabilityReport, and a PolicyReport for each different container. kubectl get vulnerabilityreports -n trivytest Result NAME REPOSITORY TAG AGE STATUS pod-nginx-container-init library/alpine latest 18m OK pod-nginx-container-init2 library/ubuntu latest 18m OK pod-nginx-container-nginx library/nginx latest 18m OK kubectl get policyreports -n trivytest Result NAME PASS FAIL WARN ERROR SKIP AGE trivy-vuln-pod-nginx-container-init 1 0 0 0 0 17m trivy-vuln-pod-nginx-container-init2 0 0 21 0 0 17m trivy-vuln-pod-nginx-container-nginx 0 32 106 0 0 17m Tip You can get and describe vulnerabilityreports and policyreports as built-in Kubernetes objects: kubectl get vulnerabilityreport pod-nginx-container-init -o json kubectl describe policyreport trivy-vuln-pod-nginx-container-init Notice that scan reports generated by the operator are controlled by Kubernetes workloads. kubectl tree pod nginx -n trivytest Result NAMESPACE NAME READY REASON AGE trivytest Pod/nginx True 4h40m trivytest \u251c\u2500CiliumEndpoint/nginx - 4h40m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-init - 20m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-init2 - 20m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-nginx - 20m trivytest \u251c\u2500VulnerabilityReport/pod-nginx-container-init - 20m trivytest \u251c\u2500VulnerabilityReport/pod-nginx-container-init2 - 20m trivytest \u2514\u2500VulnerabilityReport/pod-nginx-container-nginx - 20m Note The tree command is a kubectl plugin to browse Kubernetes object hierarchies as a tree.","title":"Reports"},{"location":"quickstart/#policy-reporter-ui-screenshots","text":"VulnerabilityReports","title":"Policy Reporter UI Screenshots"},{"location":"crds/","text":"Overview The trivy-operator uses CustomResourceDefinitions (CRDs). Theas are the fallowinf NAME SHORTNAMES APIGROUP NAMESPACED NamespaceScanner ns-scan trivy-operator.devopstales.io true VulnerabilityReport vuln,vulns trivy-operator.devopstales.io true PolicyReport rpolr wgpolicyk8s.io true","title":"Overview"},{"location":"crds/#overview","text":"The trivy-operator uses CustomResourceDefinitions (CRDs). Theas are the fallowinf NAME SHORTNAMES APIGROUP NAMESPACED NamespaceScanner ns-scan trivy-operator.devopstales.io true VulnerabilityReport vuln,vulns trivy-operator.devopstales.io true PolicyReport rpolr wgpolicyk8s.io true","title":"Overview"},{"location":"crds/cluster-policy-report/","text":"","title":"Cluster policy report"},{"location":"crds/namespace-scanner/","text":"NamespaceScanner The NamespaceScanner object is the main configuration object for the trivy-operator's vulnerabiliti scanns. The following examle object is confihured to: run the vulnerability scan every hour ( crontab: '00 * * * *' ) test only the namespaces wit the the trivy-scan: \"true\" use the users fo authentication to pulling image apiVersion : trivy-operator.devopstales.io/v1 kind : NamespaceScanner metadata : name : main-config namespace : trivy-operator spec : crontab : '00 * * * *' namespace_selector : trivy-scan registry : - name : docker.io user : \"user\" password : \"password\" The followin list show the NamespaceScanner objects listid by the kbectl cli: kubectl get ns-scan NAMESPACE NAME NAMESPACESELECTOR CRONTAB MESSAGE trivy-operator main-config trivy-scan 00 * * * *","title":"NamespaceScanner"},{"location":"crds/namespace-scanner/#namespacescanner","text":"The NamespaceScanner object is the main configuration object for the trivy-operator's vulnerabiliti scanns. The following examle object is confihured to: run the vulnerability scan every hour ( crontab: '00 * * * *' ) test only the namespaces wit the the trivy-scan: \"true\" use the users fo authentication to pulling image apiVersion : trivy-operator.devopstales.io/v1 kind : NamespaceScanner metadata : name : main-config namespace : trivy-operator spec : crontab : '00 * * * *' namespace_selector : trivy-scan registry : - name : docker.io user : \"user\" password : \"password\" The followin list show the NamespaceScanner objects listid by the kbectl cli: kubectl get ns-scan NAMESPACE NAME NAMESPACESELECTOR CRONTAB MESSAGE trivy-operator main-config trivy-scan 00 * * * *","title":"NamespaceScanner"},{"location":"crds/policy-report/","text":"PolicyReport The PolicyReport object is a protopype object probosed by the Kubernetes policy work group. The Policy Report Custom Resource Definition (CRD) can be used as a common way to provide policy results to Kubernetes cluster administrators and users, using native tools. See the proposal for background and details. This objects can be visualized by the Policy Reporter UI . Installing Add the PolicyReport CRDs to your cluster (v1alpha2): kubectl create -f https://github.com/kubernetes-sigs/wg-policy-prototypes/raw/master/policy-report/crd/v1alpha2/wgpolicyk8s.io_policyreports.yaml Note If you installed the trivy-operator by the helm chart the Policy Report Custom Resource Definition is installed automticle.","title":"PolicyReport"},{"location":"crds/policy-report/#policyreport","text":"The PolicyReport object is a protopype object probosed by the Kubernetes policy work group. The Policy Report Custom Resource Definition (CRD) can be used as a common way to provide policy results to Kubernetes cluster administrators and users, using native tools. See the proposal for background and details. This objects can be visualized by the Policy Reporter UI .","title":"PolicyReport"},{"location":"crds/policy-report/#installing","text":"Add the PolicyReport CRDs to your cluster (v1alpha2): kubectl create -f https://github.com/kubernetes-sigs/wg-policy-prototypes/raw/master/policy-report/crd/v1alpha2/wgpolicyk8s.io_policyreports.yaml Note If you installed the trivy-operator by the helm chart the Policy Report Custom Resource Definition is installed automticle.","title":"Installing"},{"location":"crds/vulnerability-report/","text":"VulnerabilityReport The VulnerabilityReport object is represents a list of vulnerabilities found in a container image of a given pod. For a multi-container workload trivy-operator creates multiple instances of VulnerabilityReports in the pod's namespace with the owner reference set to the pod. Each report follows the naming convention pod- -container- . The following example object shows a sample VulnerabilityReport associated with the Pod named nginx that has the nginx container. apiVersion : trivy-operator.devopstales.io/v1 kind : VulnerabilityReport metadata : labels : trivy-operator.container.name : nginx trivy-operator.pod.name : nginx trivy-operator.pod.namespace : trivytest name : pod-nginx-container-nginx namespace : trivytest ownerReferences : - apiVersion : v1 blockOwnerDeletion : false controller : true kind : Pod name : nginx uid : c8990780-3989-4ddb-b9ff-725f4d10b57e uid : 6d515558-5d0f-439d-b85d-bb0ad4ee4fce report : artifact : repository : library/nginx tag : latest registry : server : docker.io summary : criticalCount : 64 highCount : 149 lowCount : 188 mediumCount : 103 status : OK unknownCount : 12 vulnerabilities : - installedVersion : 1.4.8 links : - http://www.securityfocus.com/bid/106690 - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-3462 - https://lists.apache.org/thread.html/8338a0f605bdbb3a6098bb76f666a95fc2b2f53f37fa1ecc89f1146f@%3Cdevnull.infra.apache.org%3E - https://lists.debian.org/debian-lts-announce/2019/01/msg00013.html - https://lists.debian.org/debian-lts-announce/2019/01/msg00014.html - https://security.netapp.com/advisory/ntap-20190125-0002/ - https://ubuntu.com/security/notices/USN-3863-1 - https://ubuntu.com/security/notices/USN-3863-2 - https://usn.ubuntu.com/3863-1/ - https://usn.ubuntu.com/3863-2/ - https://www.debian.org/security/2019/dsa-4371 primaryLink : https://avd.aquasec.com/nvd/cve-2019-3462 resource : apt score : 8.1 severity : HIGH title : Incorrect sanitation of the 302 redirect field in HTTP transport metho ... vulnerabilityID : CVE-2019-3462 - installedVersion : 1.4.8 links : - https://access.redhat.com/security/cve/CVE-2020-27350 - https://bugs.launchpad.net/bugs/1899193 - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27350 - https://security.netapp.com/advisory/ntap-20210108-0005/ - https://ubuntu.com/security/notices/USN-4667-1 - https://ubuntu.com/security/notices/USN-4667-2 - https://usn.ubuntu.com/usn/usn-4667-1 - https://www.debian.org/security/2020/dsa-4808 primaryLink : https://avd.aquasec.com/nvd/cve-2020-27350 resource : apt score : 5.7 severity : MEDIUM title : 'apt: integer overflows and underflows while parsing .deb packages' vulnerabilityID : CVE-2020-27350 - installedVersion : 1.4.8 links : - https://bugs.launchpad.net/bugs/1878177 - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3810 - https://github.com/Debian/apt/issues/111 - https://github.com/julian-klode/apt/commit/de4efadc3c92e26d37272fd310be148ec61dcf36 - https://lists.debian.org/debian-security-announce/2020/msg00089.html - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/U4PEH357MZM2SUGKETMEHMSGQS652QHH/ - https://salsa.debian.org/apt-team/apt/-/commit/dceb1e49e4b8e4dadaf056be34088b415939cda6 - https://salsa.debian.org/jak/apt/-/commit/dceb1e49e4b8e4dadaf056be34088b415939cda6 - https://tracker.debian.org/news/1144109/accepted-apt-212-source-into-unstable/ - https://ubuntu.com/security/notices/USN-4359-1 - https://ubuntu.com/security/notices/USN-4359-2 - https://usn.ubuntu.com/4359-1/ - https://usn.ubuntu.com/4359-2/ primaryLink : https://avd.aquasec.com/nvd/cve-2020-3810 resource : apt score : 5.5 severity : MEDIUM title : Missing input validation in the ar/tar implementations of APT before v ... vulnerabilityID : CVE-2020-3810 ... The following example object shows a faliled scann resoul: apiVersion : trivy-operator.devopstales.io/v1 kind : VulnerabilityReport metadata : labels : trivy-operator.container.name : nginx trivy-operator.pod.name : nginx trivy-operator.pod.namespace : trivytest name : pod-nginx-container-nginx namespace : trivytest ownerReferences : - apiVersion : v1 blockOwnerDeletion : false controller : true kind : Pod name : nginx uid : c8990780-3989-4ddb-b9ff-725f4d10b57e uid : 6d515558-5d0f-439d-b85d-bb0ad4ee4fce report : artifact : repository : library/nginx tag : latest registry : server : docker.io summary : criticalCount : 0 highCount : 0 lowCount : 0 mediumCount : 0 status : ERROR unknownCount : 0 vulnerabilities : - installedVersion : \"\" links : [] primaryLink : \"\" resource : \"\" score : 0 severity : ERROR title : Image Scanning Error vulnerabilityID : \"\" The followin list show the VulnerabilityReport objects listid by the kbectl cli: kubectl get vulns NAMESPACE NAME REPOSITORY TAG AGE STATUS trivytest pod-nginx-container-init library/alpine latest 22s OK trivytest pod-nginx-container-init2 library/ubuntu latest 21s OK trivytest pod-nginx-container-nginx library/nginx latest 23s OK trivytest pod-nginx-container-nginx-bad nginx bad 22s ERROR trivytest pod-nginx-shiwa-container-nginx-shiwa bob/nginx latest 20s OK","title":"VulnerabilityReport"},{"location":"crds/vulnerability-report/#vulnerabilityreport","text":"The VulnerabilityReport object is represents a list of vulnerabilities found in a container image of a given pod. For a multi-container workload trivy-operator creates multiple instances of VulnerabilityReports in the pod's namespace with the owner reference set to the pod. Each report follows the naming convention pod- -container- . The following example object shows a sample VulnerabilityReport associated with the Pod named nginx that has the nginx container. apiVersion : trivy-operator.devopstales.io/v1 kind : VulnerabilityReport metadata : labels : trivy-operator.container.name : nginx trivy-operator.pod.name : nginx trivy-operator.pod.namespace : trivytest name : pod-nginx-container-nginx namespace : trivytest ownerReferences : - apiVersion : v1 blockOwnerDeletion : false controller : true kind : Pod name : nginx uid : c8990780-3989-4ddb-b9ff-725f4d10b57e uid : 6d515558-5d0f-439d-b85d-bb0ad4ee4fce report : artifact : repository : library/nginx tag : latest registry : server : docker.io summary : criticalCount : 64 highCount : 149 lowCount : 188 mediumCount : 103 status : OK unknownCount : 12 vulnerabilities : - installedVersion : 1.4.8 links : - http://www.securityfocus.com/bid/106690 - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-3462 - https://lists.apache.org/thread.html/8338a0f605bdbb3a6098bb76f666a95fc2b2f53f37fa1ecc89f1146f@%3Cdevnull.infra.apache.org%3E - https://lists.debian.org/debian-lts-announce/2019/01/msg00013.html - https://lists.debian.org/debian-lts-announce/2019/01/msg00014.html - https://security.netapp.com/advisory/ntap-20190125-0002/ - https://ubuntu.com/security/notices/USN-3863-1 - https://ubuntu.com/security/notices/USN-3863-2 - https://usn.ubuntu.com/3863-1/ - https://usn.ubuntu.com/3863-2/ - https://www.debian.org/security/2019/dsa-4371 primaryLink : https://avd.aquasec.com/nvd/cve-2019-3462 resource : apt score : 8.1 severity : HIGH title : Incorrect sanitation of the 302 redirect field in HTTP transport metho ... vulnerabilityID : CVE-2019-3462 - installedVersion : 1.4.8 links : - https://access.redhat.com/security/cve/CVE-2020-27350 - https://bugs.launchpad.net/bugs/1899193 - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27350 - https://security.netapp.com/advisory/ntap-20210108-0005/ - https://ubuntu.com/security/notices/USN-4667-1 - https://ubuntu.com/security/notices/USN-4667-2 - https://usn.ubuntu.com/usn/usn-4667-1 - https://www.debian.org/security/2020/dsa-4808 primaryLink : https://avd.aquasec.com/nvd/cve-2020-27350 resource : apt score : 5.7 severity : MEDIUM title : 'apt: integer overflows and underflows while parsing .deb packages' vulnerabilityID : CVE-2020-27350 - installedVersion : 1.4.8 links : - https://bugs.launchpad.net/bugs/1878177 - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3810 - https://github.com/Debian/apt/issues/111 - https://github.com/julian-klode/apt/commit/de4efadc3c92e26d37272fd310be148ec61dcf36 - https://lists.debian.org/debian-security-announce/2020/msg00089.html - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/U4PEH357MZM2SUGKETMEHMSGQS652QHH/ - https://salsa.debian.org/apt-team/apt/-/commit/dceb1e49e4b8e4dadaf056be34088b415939cda6 - https://salsa.debian.org/jak/apt/-/commit/dceb1e49e4b8e4dadaf056be34088b415939cda6 - https://tracker.debian.org/news/1144109/accepted-apt-212-source-into-unstable/ - https://ubuntu.com/security/notices/USN-4359-1 - https://ubuntu.com/security/notices/USN-4359-2 - https://usn.ubuntu.com/4359-1/ - https://usn.ubuntu.com/4359-2/ primaryLink : https://avd.aquasec.com/nvd/cve-2020-3810 resource : apt score : 5.5 severity : MEDIUM title : Missing input validation in the ar/tar implementations of APT before v ... vulnerabilityID : CVE-2020-3810 ... The following example object shows a faliled scann resoul: apiVersion : trivy-operator.devopstales.io/v1 kind : VulnerabilityReport metadata : labels : trivy-operator.container.name : nginx trivy-operator.pod.name : nginx trivy-operator.pod.namespace : trivytest name : pod-nginx-container-nginx namespace : trivytest ownerReferences : - apiVersion : v1 blockOwnerDeletion : false controller : true kind : Pod name : nginx uid : c8990780-3989-4ddb-b9ff-725f4d10b57e uid : 6d515558-5d0f-439d-b85d-bb0ad4ee4fce report : artifact : repository : library/nginx tag : latest registry : server : docker.io summary : criticalCount : 0 highCount : 0 lowCount : 0 mediumCount : 0 status : ERROR unknownCount : 0 vulnerabilities : - installedVersion : \"\" links : [] primaryLink : \"\" resource : \"\" score : 0 severity : ERROR title : Image Scanning Error vulnerabilityID : \"\" The followin list show the VulnerabilityReport objects listid by the kbectl cli: kubectl get vulns NAMESPACE NAME REPOSITORY TAG AGE STATUS trivytest pod-nginx-container-init library/alpine latest 22s OK trivytest pod-nginx-container-init2 library/ubuntu latest 21s OK trivytest pod-nginx-container-nginx library/nginx latest 23s OK trivytest pod-nginx-container-nginx-bad nginx bad 22s ERROR trivytest pod-nginx-shiwa-container-nginx-shiwa bob/nginx latest 20s OK","title":"VulnerabilityReport"},{"location":"functions/image-validator/","text":"Trivy Image Validator Admission Controller The admission controller function can be configured as a ValidatingWebhook in a k8s cluster. Kubernetes will send requests to the admission server when a Pod creation is initiated. The admission controller checks the image using trivy if it is in a namespace with the label trivy-operator-validation=true . Example Deploy: You can define policy to the Admission Controller, by adding annotation to the pod trough the deployment: spec: ... template: metadata: annotations: trivy.security.devopstales.io/medium: \"5\" trivy.security.devopstales.io/low: \"10\" trivy.security.devopstales.io/critical: \"2\" ...","title":"Admission Controller"},{"location":"functions/image-validator/#trivy-image-validator","text":"","title":"Trivy Image Validator"},{"location":"functions/image-validator/#admission-controller","text":"The admission controller function can be configured as a ValidatingWebhook in a k8s cluster. Kubernetes will send requests to the admission server when a Pod creation is initiated. The admission controller checks the image using trivy if it is in a namespace with the label trivy-operator-validation=true .","title":"Admission Controller"},{"location":"functions/image-validator/#example-deploy","text":"You can define policy to the Admission Controller, by adding annotation to the pod trough the deployment: spec: ... template: metadata: annotations: trivy.security.devopstales.io/medium: \"5\" trivy.security.devopstales.io/low: \"10\" trivy.security.devopstales.io/critical: \"2\" ...","title":"Example Deploy:"},{"location":"integrations/monitoring/","text":"Monitoring Trivy-operatos has a prometheus endpoint on port 9115 and can be deployed wit ServiceMonitor for automated scrapping. You can enable monitoring in the helm chart: monitoring : port : \"9115\" serviceMonitor : enabled : true namespace : \"monitoring-system\" curl -s http://10.43.179.39:9115/metrics | grep trivy_vulnerabilities # HELP trivy_vulnerabilities_sum Container vulnerabilities # TYPE trivy_vulnerabilities_sum gauge trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/openshift/mysql-56-centos7:latest\" ,severity = \"scanning_error\" } 1 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"UNKNOWN\" } 0 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"LOW\" } 83 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"MEDIUM\" } 5 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"HIGH\" } 7 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"CRITICAL\" } 4 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"UNKNOWN\" } 0 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"LOW\" } 126 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"MEDIUM\" } 25 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"HIGH\" } 43 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"CRITICAL\" } 21 .0 # HELP trivy_vulnerabilities Container vulnerabilities # TYPE trivy_vulnerabilities gauge trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"2.2.4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2011-3374\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"8.32-4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2016-2781\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"8.32-4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2017-18018\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"CRITICAL\" ,vulnerabilityId = \"CVE-2021-22945\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"HIGH\" ,vulnerabilityId = \"CVE-2021-22946\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"MEDIUM\" ,vulnerabilityId = \"CVE-2021-22947\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2021-22898\" } 1 .0 curl -s http://10.43.179.39:9115/metrics | grep ac_vulnerabilities # HELP ac_vulnerabilities Admission Controller vulnerabilities # TYPE ac_vulnerabilities gauge ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"UNKNOWN\" } 0 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"LOW\" } 83 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"MEDIUM\" } 6 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"HIGH\" } 6 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"CRITICAL\" } 4 .0","title":"Monitoring"},{"location":"integrations/monitoring/#monitoring","text":"Trivy-operatos has a prometheus endpoint on port 9115 and can be deployed wit ServiceMonitor for automated scrapping. You can enable monitoring in the helm chart: monitoring : port : \"9115\" serviceMonitor : enabled : true namespace : \"monitoring-system\" curl -s http://10.43.179.39:9115/metrics | grep trivy_vulnerabilities # HELP trivy_vulnerabilities_sum Container vulnerabilities # TYPE trivy_vulnerabilities_sum gauge trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/openshift/mysql-56-centos7:latest\" ,severity = \"scanning_error\" } 1 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"UNKNOWN\" } 0 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"LOW\" } 83 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"MEDIUM\" } 5 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"HIGH\" } 7 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"CRITICAL\" } 4 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"UNKNOWN\" } 0 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"LOW\" } 126 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"MEDIUM\" } 25 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"HIGH\" } 43 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"CRITICAL\" } 21 .0 # HELP trivy_vulnerabilities Container vulnerabilities # TYPE trivy_vulnerabilities gauge trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"2.2.4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2011-3374\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"8.32-4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2016-2781\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"8.32-4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2017-18018\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"CRITICAL\" ,vulnerabilityId = \"CVE-2021-22945\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"HIGH\" ,vulnerabilityId = \"CVE-2021-22946\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"MEDIUM\" ,vulnerabilityId = \"CVE-2021-22947\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2021-22898\" } 1 .0 curl -s http://10.43.179.39:9115/metrics | grep ac_vulnerabilities # HELP ac_vulnerabilities Admission Controller vulnerabilities # TYPE ac_vulnerabilities gauge ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"UNKNOWN\" } 0 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"LOW\" } 83 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"MEDIUM\" } 6 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"HIGH\" } 6 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"CRITICAL\" } 4 .0","title":"Monitoring"},{"location":"integrations/policy-reporter/","text":"Policy Reporter UI The Policy Reporter UI is a monitoring and Observability Tool for the PolicyReport CRD with an optional UI. It is created by Kyverno. The main goal was a tool to visualize the resoluts of the Kyverno policies, but because it uses the PolicyReports CRD it can visualize the resoults of the trivy-operator scans. Installation with Helm v3 helm repo add policy-reporter https://kyverno.github.io/policy-reporter helm repo update helm install policy-reporter policy-reporter/policy-reporter \\ --set kyvernoPlugin.enabled = true --set ui.enabled = true --set ui.plugins.kyverno = true \\ -n policy-reporter --create-namespace kubectl port-forward service/policy-reporter-ui 8082 :8080 -n policy-reporter Open http://localhost:8082/ in your browser.","title":"Policy Reporter"},{"location":"integrations/policy-reporter/#policy-reporter-ui","text":"The Policy Reporter UI is a monitoring and Observability Tool for the PolicyReport CRD with an optional UI. It is created by Kyverno. The main goal was a tool to visualize the resoluts of the Kyverno policies, but because it uses the PolicyReports CRD it can visualize the resoults of the trivy-operator scans.","title":"Policy Reporter UI"},{"location":"integrations/policy-reporter/#installation-with-helm-v3","text":"helm repo add policy-reporter https://kyverno.github.io/policy-reporter helm repo update helm install policy-reporter policy-reporter/policy-reporter \\ --set kyvernoPlugin.enabled = true --set ui.enabled = true --set ui.plugins.kyverno = true \\ -n policy-reporter --create-namespace kubectl port-forward service/policy-reporter-ui 8082 :8080 -n policy-reporter Open http://localhost:8082/ in your browser.","title":"Installation with Helm v3"}]}