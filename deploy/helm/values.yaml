image:
  repository: devopstales/trivy-operator
  pullPolicy: Always
  tag: "2.4.1"

TimeZone: UTC

# Log level
log_level: "INFO"
# INFO, HIGH, DEBUG

imagePullSecrets: []
podSecurityContext:
  fsGroup: 10001
  fsGroupChangePolicy: "OnRootMismatch"

serviceAccount:
  create: true
  annotations: {}
  name: "trivy-operator"

# Dont try to download trivy db, run in air-gapped env:
offline:
  enabled: false
#  db_repository: localhost:5000/trivy-db

cache:
  enabled: false

monitoring:
  port: "9115"

# deploy service monitor
serviceMonitor:
  enabled: false
  # allow to override the namespace for serviceMonitor
  namespace:
  # labels to match the serviceMonitorSelector of the Prometheus Resource
  labels:
    release: prometheus
  # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
  relabelings: []
  # see serviceMonitor.relabelings
  metricRelabelings: []

grafana:
  # namespace for configMap of grafana dashboards
  namespace:
  dashboards:
    # Enable the deployment of grafana dashboards
    enabled: true
    # Label to find dashboards using the k8s sidecar
    label: grafana_dashboard
    value: "1"
  folder:
    # Annotation to enable folder storage using the k8s sidecar
    annotation: grafana_folder
    # Grafana folder in which to store the dashboards
    name: Policy Reporter

persistence:
  enabled: true
  accessMode: "ReadWriteOnce"
  size: "1Gi"
  annotations: {}
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

# content foc ns-scan CRD
namespaceScanner:
  crontab: "*/5 * * * *"
  namespaceSelector: "trivy-scan"
  clusterWide: false
  integrations:
    policyreport: false
#    defectdojo:
#      host: "https://defectdojo.k8s.intra"
#      api_key: "xyz456ucdssd67sd67dsg"
#      k8s-cluster-name: "eks-prod"

kube_bench_scnner:
  image:
    repository: devopstales/kube-bench-scnner
    pullPolicy: Always
    tag: "2.5"

clusterScanner:
  enabled: false
  crontab: "*/1 * * * *"
  scanProfileName: "cis-1.23"
  integrations:
#    defectdojo:
#      host: "https://defectdojo.k8s.intra"
#      api_key: "xyz456ucdssd67sd67dsg"
#      k8s-cluster-name: "eks-prod"

# enable adission controller
admissionController:
  enabled: false

# authentication informatin for trivy to use wen scan image
registryAuth:
  enabled: false
  image_pull_secrets:
    - regcred
## list containing the names of the image pull secrets 
## you want to use from the operator namespace for image pulls
#  registry:
#  - name: docker.io
#    username: "user"
#    password: "password"

# github authentiation token for trivy database download
githubToken:
  enabled: false
  token: ""

## Define which Nodes the Pods are scheduled on.
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for use with node taints
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
# - key: "key"
#   operator: "Equal"
#   value: "value"
#   effect: "NoSchedule"

## Assign custom affinity rules to the trivy operator
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
##
affinity: {}
# nodeAffinity:
#   requiredDuringSchedulingIgnoredDuringExecution:
#     nodeSelectorTerms:
#     - matchExpressions:
#       - key: kubernetes.io/e2e-az-name
#         operator: In
#         values:
#         - e2e-az1
#         - e2e-az2
