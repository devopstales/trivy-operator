{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is trivy-operator? Trivy-operator is a Kubernetes Operator based on the open-source container vulnerability scanner Trivy . The goal of this project is to provide a vulnerability scanner that continuously scans containers deployed in a Kubernetes cluster. Built with Kubernetes Operator Pythonic Framework (Kopf) There are a few solution for checking the images when you deploy them to the Kubernetes cluster, but fighting against vulnerabilities is a day to day task. Check once is not enough when every day is a new das for frats. That is why I created trivy-operator so you can create scheduled image scans on your running pods.","title":"Overview"},{"location":"#what-is-trivy-operator","text":"Trivy-operator is a Kubernetes Operator based on the open-source container vulnerability scanner Trivy . The goal of this project is to provide a vulnerability scanner that continuously scans containers deployed in a Kubernetes cluster. Built with Kubernetes Operator Pythonic Framework (Kopf) There are a few solution for checking the images when you deploy them to the Kubernetes cluster, but fighting against vulnerabilities is a day to day task. Check once is not enough when every day is a new das for frats. That is why I created trivy-operator so you can create scheduled image scans on your running pods.","title":"What is trivy-operator?"},{"location":"configuration/","text":"Configuration Create a values file for your helm deploy: cat <<'EOF'> values.yaml image : repository : devopstales/trivy-operator pullPolicy : Always tag : \"2.3\" imagePullSecrets : [] podSecurityContext : fsGroup : 10001 fsGroupChangePolicy : \"OnRootMismatch\" serviceAccount : create : true annotations : {} name : \"trivy-operator\" monitoring : port : \"9115\" serviceMonitor : enabled : false namespace : \"monitoring-system\" storage : enabled : true size : 1Gi NamespaceScanner : crontab : \"*/5 * * * *\" namespaceSelector : \"trivy-scan\" registryAuth : enabled : false registry : - name : docker.io user : \"user\" password : \"password\" githubToken : enabled : false token : \"\" EOF Operator Configuration The following tables lists configurable parameters of the trivy-operator chart and their default values. Parameter Description Default image.repository image devopstales/trivy-operator image.pullPolicy pullPolicy Always image.tag image tag 2.1 imagePullSecrets imagePullSecrets list [] podSecurityContext.fsGroup mount id 10001 serviceAccount.create create serviceAccount true serviceAccount.annotations add annotation to serviceAccount {} serviceAccount.name name of the serviceAccount trivy-operator monitoring.port prometheus endpoint port 9115 serviceMonitor.enabled enable serviceMonitor object creation false serviceMonitor.namespace where to create serviceMonitor object kube-system storage.enabled enable pv to store trivy database true storage.size pv size 1Gi NamespaceScanner.crontab cronjob scheduler \" /5 * * *\" NamespaceScanner.namespaceSelector Namespace Selector \"trivy-scan\" registryAuth.enabled enable registry authentication in operator false registryAuth.registry registry name for authentication registryAuth.user username for authentication registryAuth.password password for authentication githubToken.enabled Enable githubToken usage for trivy database update false githubToken.token githubToken value \"\"","title":"Configuration"},{"location":"configuration/#configuration","text":"Create a values file for your helm deploy: cat <<'EOF'> values.yaml image : repository : devopstales/trivy-operator pullPolicy : Always tag : \"2.3\" imagePullSecrets : [] podSecurityContext : fsGroup : 10001 fsGroupChangePolicy : \"OnRootMismatch\" serviceAccount : create : true annotations : {} name : \"trivy-operator\" monitoring : port : \"9115\" serviceMonitor : enabled : false namespace : \"monitoring-system\" storage : enabled : true size : 1Gi NamespaceScanner : crontab : \"*/5 * * * *\" namespaceSelector : \"trivy-scan\" registryAuth : enabled : false registry : - name : docker.io user : \"user\" password : \"password\" githubToken : enabled : false token : \"\" EOF","title":"Configuration"},{"location":"configuration/#operator-configuration","text":"The following tables lists configurable parameters of the trivy-operator chart and their default values. Parameter Description Default image.repository image devopstales/trivy-operator image.pullPolicy pullPolicy Always image.tag image tag 2.1 imagePullSecrets imagePullSecrets list [] podSecurityContext.fsGroup mount id 10001 serviceAccount.create create serviceAccount true serviceAccount.annotations add annotation to serviceAccount {} serviceAccount.name name of the serviceAccount trivy-operator monitoring.port prometheus endpoint port 9115 serviceMonitor.enabled enable serviceMonitor object creation false serviceMonitor.namespace where to create serviceMonitor object kube-system storage.enabled enable pv to store trivy database true storage.size pv size 1Gi NamespaceScanner.crontab cronjob scheduler \" /5 * * *\" NamespaceScanner.namespaceSelector Namespace Selector \"trivy-scan\" registryAuth.enabled enable registry authentication in operator false registryAuth.registry registry name for authentication registryAuth.user username for authentication registryAuth.password password for authentication githubToken.enabled Enable githubToken usage for trivy database update false githubToken.token githubToken value \"\"","title":"Operator Configuration"},{"location":"image-validator/","text":"Trivy Image Validator Admission Controller The admission controller function can be configured as a ValidatingWebhook in a k8s cluster. Kubernetes will send requests to the admission server when a Pod creation is initiated. The admission controller checks the image using trivy if it is in a namespace with the label trivy-operator-validation=true . Example Deploy: You can define policy to the Admission Controller, by adding annotation to the pod trough the deployment: spec: ... template: metadata: annotations: trivy.security.devopstales.io/medium: \"5\" trivy.security.devopstales.io/low: \"10\" trivy.security.devopstales.io/critical: \"2\" ...","title":"Admission Controller"},{"location":"image-validator/#trivy-image-validator","text":"","title":"Trivy Image Validator"},{"location":"image-validator/#admission-controller","text":"The admission controller function can be configured as a ValidatingWebhook in a k8s cluster. Kubernetes will send requests to the admission server when a Pod creation is initiated. The admission controller checks the image using trivy if it is in a namespace with the label trivy-operator-validation=true .","title":"Admission Controller"},{"location":"image-validator/#example-deploy","text":"You can define policy to the Admission Controller, by adding annotation to the pod trough the deployment: spec: ... template: metadata: annotations: trivy.security.devopstales.io/medium: \"5\" trivy.security.devopstales.io/low: \"10\" trivy.security.devopstales.io/critical: \"2\" ...","title":"Example Deploy:"},{"location":"installation/","text":"Installation Helm Helm , which is a popular package manager for Kubernetes, allows installing applications from parameterized YAML manifests called Helm charts . Installing from the DevOpsTales Chart Repository helm repo add devopstales https://devopstales.github.io/helm-charts helm repo update helm upgrade --install trivy-operator devopstales/trivy-operator Tip : List all releases using helm list . Advanced Configuration The command deploys trivy-operator on the Kubernetes cluster in the default configuration. The Parameters section lists the parameters that can be configured during installation. Uninstall You can uninstall the operator with the following command: helm uninstall trivy-operator You have to manually delete custom resource definitions an the validating webhook configurations created by the helm install command: Danger Deleting custom resource definitions will also delete all security reports generated by the operator. kubectl delete crd namespace-scanners.trivy-operator.devopstales.io kubectl delete crd vulnerabilityreports.trivy-operator.devopstales.io kubectl delete validatingwebhookconfigurations trivy-image-validator.devopstales.io OperatorFramework With the release of trivy-operator 2.3 I published trivy-operator with OperatorFramework to OperatorHub:","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#helm","text":"Helm , which is a popular package manager for Kubernetes, allows installing applications from parameterized YAML manifests called Helm charts .","title":"Helm"},{"location":"installation/#installing-from-the-devopstales-chart-repository","text":"helm repo add devopstales https://devopstales.github.io/helm-charts helm repo update helm upgrade --install trivy-operator devopstales/trivy-operator Tip : List all releases using helm list .","title":"Installing from the DevOpsTales Chart Repository"},{"location":"installation/#advanced-configuration","text":"The command deploys trivy-operator on the Kubernetes cluster in the default configuration. The Parameters section lists the parameters that can be configured during installation.","title":"Advanced Configuration"},{"location":"installation/#uninstall","text":"You can uninstall the operator with the following command: helm uninstall trivy-operator You have to manually delete custom resource definitions an the validating webhook configurations created by the helm install command: Danger Deleting custom resource definitions will also delete all security reports generated by the operator. kubectl delete crd namespace-scanners.trivy-operator.devopstales.io kubectl delete crd vulnerabilityreports.trivy-operator.devopstales.io kubectl delete validatingwebhookconfigurations trivy-image-validator.devopstales.io","title":"Uninstall"},{"location":"installation/#operatorframework","text":"With the release of trivy-operator 2.3 I published trivy-operator with OperatorFramework to OperatorHub:","title":"OperatorFramework"},{"location":"monitoring/","text":"Monitoring Trivy-operatos has a prometheus endpoint on port 9115 and can be deployed wit ServiceMonitor for automated scrapping. You can enable monitoring in the helm chart: monitoring : port : \"9115\" serviceMonitor : enabled : true namespace : \"monitoring-system\" curl -s http://10.43.179.39:9115/metrics | grep trivy_vulnerabilities # HELP trivy_vulnerabilities_sum Container vulnerabilities # TYPE trivy_vulnerabilities_sum gauge trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/openshift/mysql-56-centos7:latest\" ,severity = \"scanning_error\" } 1 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"UNKNOWN\" } 0 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"LOW\" } 83 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"MEDIUM\" } 5 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"HIGH\" } 7 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"CRITICAL\" } 4 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"UNKNOWN\" } 0 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"LOW\" } 126 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"MEDIUM\" } 25 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"HIGH\" } 43 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"CRITICAL\" } 21 .0 # HELP trivy_vulnerabilities Container vulnerabilities # TYPE trivy_vulnerabilities gauge trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"2.2.4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2011-3374\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"8.32-4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2016-2781\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"8.32-4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2017-18018\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"CRITICAL\" ,vulnerabilityId = \"CVE-2021-22945\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"HIGH\" ,vulnerabilityId = \"CVE-2021-22946\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"MEDIUM\" ,vulnerabilityId = \"CVE-2021-22947\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2021-22898\" } 1 .0 curl -s http://10.43.179.39:9115/metrics | grep ac_vulnerabilities # HELP ac_vulnerabilities Admission Controller vulnerabilities # TYPE ac_vulnerabilities gauge ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"UNKNOWN\" } 0 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"LOW\" } 83 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"MEDIUM\" } 6 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"HIGH\" } 6 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"CRITICAL\" } 4 .0","title":"Monitoring"},{"location":"monitoring/#monitoring","text":"Trivy-operatos has a prometheus endpoint on port 9115 and can be deployed wit ServiceMonitor for automated scrapping. You can enable monitoring in the helm chart: monitoring : port : \"9115\" serviceMonitor : enabled : true namespace : \"monitoring-system\" curl -s http://10.43.179.39:9115/metrics | grep trivy_vulnerabilities # HELP trivy_vulnerabilities_sum Container vulnerabilities # TYPE trivy_vulnerabilities_sum gauge trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/openshift/mysql-56-centos7:latest\" ,severity = \"scanning_error\" } 1 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"UNKNOWN\" } 0 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"LOW\" } 83 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"MEDIUM\" } 5 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"HIGH\" } 7 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,severity = \"CRITICAL\" } 4 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"UNKNOWN\" } 0 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"LOW\" } 126 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"MEDIUM\" } 25 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"HIGH\" } 43 .0 trivy_vulnerabilities_sum { exported_namespace = \"trivytest\" ,image = \"docker.io/library/nginx:1.18\" ,severity = \"CRITICAL\" } 21 .0 # HELP trivy_vulnerabilities Container vulnerabilities # TYPE trivy_vulnerabilities gauge trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"2.2.4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2011-3374\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"8.32-4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2016-2781\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"8.32-4\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2017-18018\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"CRITICAL\" ,vulnerabilityId = \"CVE-2021-22945\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"HIGH\" ,vulnerabilityId = \"CVE-2021-22946\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"MEDIUM\" ,vulnerabilityId = \"CVE-2021-22947\" } 1 .0 trivy_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"docker.io/nginxinc/nginx-unprivileged:latest\" ,installedVersion = \"7.74.0-1.3\" ,pkgName = \"pkgName\" ,severity = \"LOW\" ,vulnerabilityId = \"CVE-2021-22898\" } 1 .0 curl -s http://10.43.179.39:9115/metrics | grep ac_vulnerabilities # HELP ac_vulnerabilities Admission Controller vulnerabilities # TYPE ac_vulnerabilities gauge ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"UNKNOWN\" } 0 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"LOW\" } 83 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"MEDIUM\" } 6 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"HIGH\" } 6 .0 ac_vulnerabilities { exported_namespace = \"trivytest\" ,image = \"nginxinc/nginx-unprivileged:latest\" ,severity = \"CRITICAL\" } 4 .0","title":"Monitoring"},{"location":"quickstart/","text":"Quick Start Before you Begin You need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by installing minikube , kind or microk8s , or you can use the following Kubernetes playground . You also need the Trivy-Operator to be installed with Helm . Workloads Scanning Let's create a Deployment that we know is vulnerable: kubectl apply -f https://raw.githubusercontent.com/devopstales/trivy-operator/main/deploy/kubernetes/10_demo.yaml Scheduled Image scans Default trivy-operator execute a scan script every 5 minutes. It will get images from all the namespaces with the label trivy-scan=true , and then check these images with trivy for vulnerabilities. You can label an existing namespace with the fallowing command: kubectl label namespaces guestbook-demo trivy-scan=true Reports If enabled the operator creates a VulnerabilityReport, and a PolicyReport for each different container. kubectl get vulnerabilityreports -n trivytest Result NAME REPOSITORY TAG AGE STATUS pod-nginx-container-init library/alpine latest 18m OK pod-nginx-container-init2 library/ubuntu latest 18m OK pod-nginx-container-nginx library/nginx latest 18m OK kubectl get policyreports -n trivytest Result NAME PASS FAIL WARN ERROR SKIP AGE trivy-vuln-pod-nginx-container-init 1 0 0 0 0 17m trivy-vuln-pod-nginx-container-init2 0 0 21 0 0 17m trivy-vuln-pod-nginx-container-nginx 0 32 106 0 0 17m Tip You can get and describe vulnerabilityreports and policyreports as built-in Kubernetes objects: kubectl get vulnerabilityreport pod-nginx-container-init -o json kubectl describe policyreport trivy-vuln-pod-nginx-container-init Notice that scan reports generated by the operator are controlled by Kubernetes workloads. kubectl tree pod nginx -n trivytest Result NAMESPACE NAME READY REASON AGE trivytest Pod/nginx True 4h40m trivytest \u251c\u2500CiliumEndpoint/nginx - 4h40m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-init - 20m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-init2 - 20m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-nginx - 20m trivytest \u251c\u2500VulnerabilityReport/pod-nginx-container-init - 20m trivytest \u251c\u2500VulnerabilityReport/pod-nginx-container-init2 - 20m trivytest \u2514\u2500VulnerabilityReport/pod-nginx-container-nginx - 20m Note The tree command is a kubectl plugin to browse Kubernetes object hierarchies as a tree. Policy Reporter UI Screenshots VulnerabilityReports","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#before-you-begin","text":"You need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by installing minikube , kind or microk8s , or you can use the following Kubernetes playground . You also need the Trivy-Operator to be installed with Helm .","title":"Before you Begin"},{"location":"quickstart/#workloads-scanning","text":"Let's create a Deployment that we know is vulnerable: kubectl apply -f https://raw.githubusercontent.com/devopstales/trivy-operator/main/deploy/kubernetes/10_demo.yaml","title":"Workloads Scanning"},{"location":"quickstart/#scheduled-image-scans","text":"Default trivy-operator execute a scan script every 5 minutes. It will get images from all the namespaces with the label trivy-scan=true , and then check these images with trivy for vulnerabilities. You can label an existing namespace with the fallowing command: kubectl label namespaces guestbook-demo trivy-scan=true","title":"Scheduled Image scans"},{"location":"quickstart/#reports","text":"If enabled the operator creates a VulnerabilityReport, and a PolicyReport for each different container. kubectl get vulnerabilityreports -n trivytest Result NAME REPOSITORY TAG AGE STATUS pod-nginx-container-init library/alpine latest 18m OK pod-nginx-container-init2 library/ubuntu latest 18m OK pod-nginx-container-nginx library/nginx latest 18m OK kubectl get policyreports -n trivytest Result NAME PASS FAIL WARN ERROR SKIP AGE trivy-vuln-pod-nginx-container-init 1 0 0 0 0 17m trivy-vuln-pod-nginx-container-init2 0 0 21 0 0 17m trivy-vuln-pod-nginx-container-nginx 0 32 106 0 0 17m Tip You can get and describe vulnerabilityreports and policyreports as built-in Kubernetes objects: kubectl get vulnerabilityreport pod-nginx-container-init -o json kubectl describe policyreport trivy-vuln-pod-nginx-container-init Notice that scan reports generated by the operator are controlled by Kubernetes workloads. kubectl tree pod nginx -n trivytest Result NAMESPACE NAME READY REASON AGE trivytest Pod/nginx True 4h40m trivytest \u251c\u2500CiliumEndpoint/nginx - 4h40m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-init - 20m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-init2 - 20m trivytest \u251c\u2500PolicyReport/trivy-vuln-pod-nginx-container-nginx - 20m trivytest \u251c\u2500VulnerabilityReport/pod-nginx-container-init - 20m trivytest \u251c\u2500VulnerabilityReport/pod-nginx-container-init2 - 20m trivytest \u2514\u2500VulnerabilityReport/pod-nginx-container-nginx - 20m Note The tree command is a kubectl plugin to browse Kubernetes object hierarchies as a tree.","title":"Reports"},{"location":"quickstart/#policy-reporter-ui-screenshots","text":"VulnerabilityReports","title":"Policy Reporter UI Screenshots"}]}